
===== ./app.py =====
# ===== ./app.py (PHI√äN B·∫¢N QU·∫¢N L√ù NG∆Ø·ªúI N√ìI ƒê·ªòNG) =====
from flask import Flask, render_template, request, jsonify, session
import os
import torch
from TTS.api import TTS
import uuid
from pydub import AudioSegment
from datetime import timedelta
import json

# ... (C√°c ph·∫ßn import an to√†n gi·ªØ nguy√™n) ...
from torch.serialization import add_safe_globals
from TTS.tts.configs.xtts_config import XttsConfig
from TTS.tts.models.xtts import XttsAudioConfig, XttsArgs
from TTS.config.shared_configs import BaseDatasetConfig
add_safe_globals([XttsConfig, XttsAudioConfig, XttsArgs, BaseDatasetConfig])


app = Flask(__name__)
# ... (C·∫•u h√¨nh app gi·ªØ nguy√™n) ...
app.config['SECRET_KEY'] = os.urandom(24)
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=1)
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['OUTPUT_FOLDER'] = 'static/outputs'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['OUTPUT_FOLDER'], exist_ok=True)


print("üöÄ ƒêang t·∫£i model XTTS v2... Vui l√≤ng ch·ªù.")
tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2", progress_bar=False, gpu=False)
print("‚úÖ Model ƒë√£ s·∫µn s√†ng!")

# C√°c gi·ªçng n√≥i m·∫∑c ƒë·ªãnh
DEFAULT_VOICES = {
    "male_zh_mp3": {"name": "Gi·ªçng Nam (Ti·∫øng Trung)", "path": "samples/male_zh.mp3"},
    "female_zh_mp3": {"name": "Gi·ªçng N·ªØ (Ti·∫øng Trung)", "path": "samples/female_zh.mp3"},
}
SUPPORTED_LANGUAGES = { "zh-cn": "Chinese (Simplified)", "en": "English", "vi": "Vietnamese" }

def clear_session_files():
    """X√≥a c√°c file ƒë∆∞·ª£c t·∫°o trong phi√™n tr∆∞·ªõc ƒë√≥."""
    if 'generated_files' in session:
        for file_path in session.get('generated_files', []):
            try:
                if os.path.exists(file_path): os.remove(file_path)
            except Exception as e: print(f"L·ªói khi x√≥a file {file_path}: {e}")
    session['generated_files'] = []

@app.route("/")
def index():
    # Kh√¥i ph·ª•c tr·∫°ng th√°i t·ª´ session ho·∫∑c d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
    session_state = {
        'speakers': session.get('speakers', {
            'A': {'voice': 'male_zh_mp3'},
            'B': {'voice': 'female_zh_mp3'}
        }),
        'uploaded_voices': session.get('uploaded_voices', {}),
        'script': session.get('script', 'A: ‰Ω†Â•Ω„ÄÇ\nB: ‰Ω†Â•ΩÂêóÔºü'),
        'language': session.get('language', 'zh-cn'),
        'speed': session.get('speed', 1.0)
    }
    session.permanent = True
    return render_template("index.html", languages=SUPPORTED_LANGUAGES, default_voices=DEFAULT_VOICES, session_state=session_state)

@app.route("/generate", methods=["POST"])
def generate():
    # B·∫Øt ƒë·∫ßu m·ªôt phi√™n h·ªôi tho·∫°i m·ªõi, x√≥a file c≈©
    clear_session_files()
    
    # L·∫•y d·ªØ li·ªáu t·ª´ form
    data = request.form
    script = data.get('script')
    language = data.get('language')
    speed = data.get('speed', 1.0, type=float)
    # Nh·∫≠n c·∫•u h√¨nh speakers t·ª´ frontend d∆∞·ªõi d·∫°ng chu·ªói JSON
    speakers_config = json.loads(data.get('speakers_config', '{}'))

    # L∆∞u l·∫°i tr·∫°ng th√°i input ƒë·ªÉ kh√¥i ph·ª•c
    session['script'] = script
    session['language'] = language
    session['speed'] = speed
    session['speakers'] = speakers_config
    
    # X√¢y d·ª±ng b·∫£n ƒë·ªì gi·ªçng n√≥i cho l·∫ßn t·∫°o n√†y
    # B·∫Øt ƒë·∫ßu v·ªõi c√°c gi·ªçng m·∫∑c ƒë·ªãnh
    voice_map = {key: value['path'] for key, value in DEFAULT_VOICES.items()}
    
    # X·ª≠ l√Ω c√°c file ƒë∆∞·ª£c t·∫£i l√™n
    # `request.files` ch·ª©a c√°c file ƒë∆∞·ª£c g·ª≠i t·ª´ form
    for file_key, file_storage in request.files.items():
        if file_storage.filename != '':
            # file_key s·∫Ω c√≥ d·∫°ng `file_A`, `file_C`,...
            # Tr√≠ch xu·∫•t m√£ ng∆∞·ªùi n√≥i (A, C,...)
            speaker_id = file_key.split('_')[-1]
            
            # L∆∞u file t·∫£i l√™n v·ªõi t√™n duy nh·∫•t
            save_path, _ = handle_file_upload(file_storage)
            
            # C·∫≠p nh·∫≠t b·∫£n ƒë·ªì gi·ªçng n√≥i: gi·ªçng t√πy ch·ªânh s·∫Ω ghi ƒë√® gi·ªçng m·∫∑c ƒë·ªãnh
            # T·∫°o m·ªôt id gi·ªçng n√≥i duy nh·∫•t cho file n√†y
            custom_voice_id = f"custom_{speaker_id}"
            voice_map[custom_voice_id] = save_path
            
            # C·∫≠p nh·∫≠t c·∫•u h√¨nh c·ªßa ng∆∞·ªùi n√≥i ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√≥i t√πy ch·ªânh n√†y
            speakers_config[speaker_id]['voice'] = custom_voice_id

            # Th√™m file ƒë√£ upload v√†o danh s√°ch c·∫ßn d·ªçn d·∫πp
            session['generated_files'].append(save_path)

    # B·∫Øt ƒë·∫ßu x·ª≠ l√Ω k·ªãch b·∫£n
    lines = [l.strip() for l in script.strip().split("\n") if l.strip()]
    audio_files_data = []
    newly_created_paths = []

    for line in lines:
        parts = line.split(":", 1)
        if len(parts) != 2: continue
        
        speaker_id = parts[0].strip().upper()
        text = parts[1].strip()

        # T√¨m gi·ªçng n√≥i cho speaker n√†y
        if speaker_id not in speakers_config:
            print(f"B·ªè qua d√≤ng v√¨ kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh cho ng∆∞·ªùi n√≥i '{speaker_id}'")
            continue
        
        voice_id_for_speaker = speakers_config[speaker_id]['voice']
        
        if voice_id_for_speaker not in voice_map:
            print(f"B·ªè qua d√≤ng v√¨ kh√¥ng t√¨m th·∫•y gi·ªçng n√≥i '{voice_id_for_speaker}' trong b·∫£n ƒë·ªì")
            continue
            
        speaker_path = voice_map[voice_id_for_speaker]
        
        # T·∫°o file √¢m thanh
        output_filename = f"{uuid.uuid4()}.wav"
        output_path = os.path.join(app.config['OUTPUT_FOLDER'], output_filename)
        try:
            tts.tts_to_file(text=text, speaker_wav=speaker_path, language=language, file_path=output_path, speed=speed)
            session['generated_files'].append(output_path)
            newly_created_paths.append(output_path)
            audio_files_data.append({"speaker": speaker_id, "text": text, "path": output_path})
        except Exception as e:
            print(f"L·ªói khi t·∫°o TTS: {e}")
            return jsonify({"error": f"Kh√¥ng th·ªÉ x·ª≠ l√Ω d√≤ng: '{line}'. Chi ti·∫øt: {str(e)}"}), 500
            
    # G·ªôp c√°c file v·ª´a t·∫°o
    combined_path = combine_audio_files(newly_created_paths)
    if combined_path:
        session['generated_files'].append(combined_path)

    return jsonify({
        "results": audio_files_data,
        "conversation_audio": combined_path,
        # G·ª≠i l·∫°i tr·∫°ng th√°i m·ªõi ƒë·ªÉ frontend c√≥ th·ªÉ c·∫≠p nh·∫≠t
        "updated_session_state": { "speakers": speakers_config }
    })

# ... C√°c h√†m ph·ª• kh√°c ...
@app.route("/clear_all")
def clear_all_session_data():
    clear_session_files()
    session.clear()
    return jsonify({"status": "success", "message": "To√†n b·ªô session v√† file ƒë√£ ƒë∆∞·ª£c x√≥a."})

def handle_file_upload(file):
    filename = f"{uuid.uuid4()}_{os.path.basename(file.filename)}"
    save_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(save_path)
    return save_path, os.path.basename(file.filename)

def combine_audio_files(file_paths):
    if not file_paths: return None
    combined = AudioSegment.empty()
    for path in file_paths:
        try: combined += AudioSegment.from_wav(path)
        except Exception as e: print(f"L·ªói khi ƒë·ªçc file {path} ƒë·ªÉ n·ªëi: {e}"); continue
    combined_filename = f"conversation_{uuid.uuid4()}.wav"
    combined_path = os.path.join(app.config['OUTPUT_FOLDER'], combined_filename)
    combined.export(combined_path, format="wav")
    return combined_path

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=7860, debug=True)

===== ./templates/index.html =====
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>XTTS Dynamic Conversation Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .loader { border: 5px solid #f3f3f3; border-top: 5px solid #3498db; border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .speaker-card { transition: all 0.3s ease-in-out; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800 font-sans">
    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-blue-600">üéôÔ∏è XTTS Dynamic Conversation Generator</h1>
            <p class="text-gray-600 mt-2">T·∫°o h·ªôi tho·∫°i v·ªõi ng∆∞·ªùi n√≥i t√πy ch·ªânh</p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- C·ªôt ƒëi·ªÅu khi·ªÉn -->
            <div class="bg-white p-6 rounded-lg shadow-lg">
                <form id="tts-form">
                    <!-- C√†i ƒë·∫∑t chung -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label for="language" class="block text-sm font-medium text-gray-700 mb-1">Ng√¥n ng·ªØ:</label>
                            <select id="language" name="language" class="w-full p-2 border border-gray-300 rounded-md">
                                {% for code, name in languages.items() %}<option value="{{ code }}" {% if code == session_state.language %}selected{% endif %}>{{ name }}</option>{% endfor %}
                            </select>
                        </div>
                        <div>
                            <label for="speed" class="block text-sm font-medium text-gray-700 mb-1">T·ªëc ƒë·ªô: <span id="speed-value" class="font-bold text-blue-600">{{ "%.2f"|format(session_state.speed) }}</span></label>
                            <input type="range" id="speed" name="speed" min="0.5" max="2.0" value="{{ session_state.speed }}" step="0.05" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                        </div>
                    </div>
                    
                    <!-- ‚≠ê QU·∫¢N L√ù NG∆Ø·ªúI N√ìI ƒê·ªòNG ‚≠ê -->
                    <div class="mb-4">
                        <h3 class="text-lg font-semibold mb-2">Qu·∫£n l√Ω Ng∆∞·ªùi n√≥i</h3>
                        <div id="speakers-container" class="space-y-4">
                            <!-- JavaScript s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅn c√°c th·∫ª ng∆∞·ªùi n√≥i v√†o ƒë√¢y -->
                        </div>
                        <button type="button" id="add-speaker-btn" class="mt-4 text-sm bg-green-500 text-white font-bold py-2 px-4 rounded-md hover:bg-green-600">
                            + Th√™m Ng∆∞·ªùi n√≥i
                        </button>
                    </div>

                    <!-- K·ªãch b·∫£n -->
                    <div class="mb-4">
                        <label for="script" class="block text-sm font-medium text-gray-700 mb-1">K·ªãch b·∫£n h·ªôi tho·∫°i:</label>
                        <textarea id="script" name="script" rows="8" class="w-full p-2 border border-gray-300 rounded-md" 
                        placeholder="S·ª≠ d·ª•ng m√£ ng∆∞·ªùi n√≥i ƒë√£ ƒë·ªãnh nghƒ©a ·ªü tr√™n. V√≠ d·ª•:
A: ‰Ω†Â•Ω„ÄÇ
B: ‰Ω†Â•ΩÂêóÔºü
C: ÊàëÂæàÂ•Ω„ÄÇ">{{ session_state.script }}</textarea>
                    </div>

                    <div class="flex items-center space-x-4">
                        <button type="submit" id="generate-btn" class="flex-grow bg-blue-600 text-white font-bold py-3 px-4 rounded-md hover:bg-blue-700">T·∫°o Gi·ªçng n√≥i</button>
                        <button type="button" id="clear-session-btn" title="X√≥a to√†n b·ªô session v√† file ƒë√£ t·∫°o" class="bg-red-500 text-white p-3 rounded-md hover:bg-red-600"><svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg></button>
                    </div>
                </form>
            </div>

            <!-- C·ªôt k·∫øt qu·∫£ (gi·ªØ nguy√™n logic) -->
            <div class="bg-white p-6 rounded-lg shadow-lg flex flex-col">
                <h2 class="text-2xl font-bold mb-4 border-b pb-2">K·∫øt qu·∫£ H·ªôi tho·∫°i</h2>
                <div id="loading" class="hidden flex-col items-center justify-center py-10"><div class="loader"></div><p class="mt-4 text-gray-600">ƒêang t·∫°o gi·ªçng n√≥i...</p></div>
                <div id="error-message" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4"></div>
                <div id="result-area">
                    <p id="result-placeholder" class="text-gray-500">K·∫øt qu·∫£ s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y.</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // --- DATA t·ª´ Server ---
        const sessionState = {{ session_state|tojson|safe }};
        const defaultVoices = {{ default_voices|tojson|safe }};

        // --- ELEMENTS ---
        const form = document.getElementById('tts-form');
        const speakersContainer = document.getElementById('speakers-container');
        const addSpeakerBtn = document.getElementById('add-speaker-btn');
        // ... c√°c element kh√°c

        // --- FUNCTIONS ---
        function createVoiceOptions(selectedVoice) {
            let options = '<option value="">-- Ch·ªçn gi·ªçng m·∫∑c ƒë·ªãnh --</option>';
            for (const [id, voice] of Object.entries(defaultVoices)) {
                const isSelected = id === selectedVoice ? 'selected' : '';
                options += `<option value="${id}" ${isSelected}>${voice.name}</option>`;
            }
            return options;
        }

        function createSpeakerCard(speakerId, speakerConfig) {
            const card = document.createElement('div');
            card.className = 'speaker-card border p-3 rounded-lg bg-gray-50';
            card.dataset.speakerId = speakerId;

            // Hi·ªÉn th·ªã t√™n file ƒë√£ upload n·∫øu c√≥
            let uploadedFileInfo = '';
            if (speakerConfig.file_info) {
                uploadedFileInfo = `<span class="text-xs text-green-600 ml-2">ƒê√£ t·∫£i l√™n: ${speakerConfig.file_info.name}</span>`;
            }

            card.innerHTML = `
                <div class="flex items-center justify-between">
                    <h4 class="text-md font-bold">Ng∆∞·ªùi n√≥i: ${speakerId}</h4>
                    <button type="button" class="remove-speaker-btn text-red-500 hover:text-red-700 font-bold text-xl">√ó</button>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                    <div>
                        <label class="text-xs">Ch·ªçn gi·ªçng m·∫∑c ƒë·ªãnh:</label>
                        <select name="voice_${speakerId}" class="voice-select w-full p-1 border text-sm border-gray-300 rounded-md">
                            ${createVoiceOptions(speakerConfig.voice)}
                        </select>
                    </div>
                    <div>
                        <label class="text-xs">Ho·∫∑c t·∫£i l√™n gi·ªçng t√πy ch·ªânh:</label>
                        <input type="file" name="file_${speakerId}" class="voice-file w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded-full file:border-0 file:text-xs file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                        ${uploadedFileInfo}
                    </div>
                </div>
            `;
            speakersContainer.appendChild(card);
            card.querySelector('.remove-speaker-btn').addEventListener('click', () => card.remove());
        }
        
        function getNextSpeakerId() {
            const existingIds = Array.from(speakersContainer.querySelectorAll('.speaker-card')).map(card => card.dataset.speakerId);
            let charCode = 65; // 'A'
            while (true) {
                const nextId = String.fromCharCode(charCode);
                if (!existingIds.includes(nextId)) {
                    return nextId;
                }
                charCode++;
            }
        }

        function renderAllSpeakers() {
            speakersContainer.innerHTML = '';
            for (const [id, config] of Object.entries(sessionState.speakers)) {
                createSpeakerCard(id, config);
            }
        }

        function getSpeakersConfigFromDOM() {
            const config = {};
            speakersContainer.querySelectorAll('.speaker-card').forEach(card => {
                const id = card.dataset.speakerId;
                const voice = card.querySelector('.voice-select').value;
                config[id] = { voice: voice }; // Ch·ªâ l∆∞u voice m·∫∑c ƒë·ªãnh, file upload x·ª≠ l√Ω ri√™ng
            });
            return config;
        }

        // --- EVENT LISTENERS ---
        addSpeakerBtn.addEventListener('click', () => {
            const newId = getNextSpeakerId();
            createSpeakerCard(newId, { voice: '' }); // Th·∫ª m·ªõi kh√¥ng ch·ªçn gi·ªçng n√†o
        });
        
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const generateBtn = document.getElementById('generate-btn');
            const loadingSpinner = document.getElementById('loading');
            const errorMessageDiv = document.getElementById('error-message');
            const resultArea = document.getElementById('result-area');

            generateBtn.disabled = true;
            generateBtn.innerHTML = '<span class="animate-pulse">ƒêang x·ª≠ l√Ω...</span>';
            loadingSpinner.classList.remove('hidden');
            errorMessageDiv.classList.add('hidden');
            resultArea.innerHTML = '';

            const formData = new FormData(form);
            // Th√™m c·∫•u h√¨nh speakers v√†o form data
            formData.append('speakers_config', JSON.stringify(getSpeakersConfigFromDOM()));
            
            // X√≥a c√°c input file tr·ªëng, ch·ªâ g·ª≠i file c√≥ n·ªôi dung
            document.querySelectorAll('input[type="file"]').forEach(input => {
                if (input.files.length === 0) {
                    formData.delete(input.name);
                }
            });

            try {
                const response = await fetch('/generate', { method: 'POST', body: formData });
                if (!response.ok) { /* ... */ }

                const data = await response.json();
                
                // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i speakers t·ª´ server v√† render l·∫°i
                sessionState.speakers = data.updated_session_state.speakers;
                renderAllSpeakers();
                
                // Hi·ªÉn th·ªã k·∫øt qu·∫£
                let resultHTML = '';
                if (data.conversation_audio) { /* ... */ }
                resultHTML += '...'; // X√¢y d·ª±ng HTML nh∆∞ phi√™n b·∫£n tr∆∞·ªõc
                resultArea.innerHTML = resultHTML;
                
            } catch (error) { /* ... */ } 
            finally { /* ... */ }
        });

        // --- INITIALIZATION ---
        renderAllSpeakers();
        
        // **L∆∞u √Ω:** ƒê·ªÉ ng·∫Øn g·ªçn, c√°c ph·∫ßn code JS kh√¥ng thay ƒë·ªïi l·ªõn so v·ªõi phi√™n b·∫£n tr∆∞·ªõc ƒë√£ ƒë∆∞·ª£c l∆∞·ª£c b·ªè.
        // B·∫°n h√£y copy to√†n b·ªô file ƒë·ªÉ c√≥ code ho√†n ch·ªânh nh·∫•t.
    </script>
</body>
</html>

===== ./.devcontainer/devcontainer.json =====
// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/python
{
	"name": "Python 3",
	// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
	"image": "mcr.microsoft.com/devcontainers/python:1-3.10-bookworm"

	// Features to add to the dev container. More info: https://containers.dev/features.
	// "features": {},

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],

	// Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "pip3 install --user -r requirements.txt",

	// Configure tool-specific properties.
	// "customizations": {},

	// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
	// "remoteUser": "root"
}


===== DIRECTORY TREE =====
./
    requirements.txt
    app.py
    templates/
        index.html
    .github/
        dependabot.yml
    samples/
        male_zh.mp3
        female_zh.mp3
    .devcontainer/
        devcontainer.json
